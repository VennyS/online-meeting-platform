generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id                   Int                @id @default(autoincrement())
  shortId              String             @unique
  name                 String
  description          String?
  startAt              DateTime           @default(now())
  timeZone             String             @default("Europe/Moscow")
  durationMinutes      Int?
  isPublic             Boolean            @default(false)
  showHistoryToNewbies Boolean            @default(false)
  passwordHash         String?
  waitingRoomEnabled   Boolean            @default(false)
  allowEarlyJoin       Boolean            @default(true)
  ownerId              Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  cancelled            Boolean            @default(false)

  canShareScreen       PermissionLevel    @default(ALL)
  canStartPresentation PermissionLevel    @default(ALL)

  allowedParticipants  AllowedParticipant[]
  files                File[]
  sessions             MeetingSession[]
}

model AllowedParticipant {
  id        Int      @id @default(autoincrement())
  roomId    Int
  userId    Int
  createdAt DateTime @default(now())

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
}

model File {
  id           Int       @id @default(autoincrement())
  roomId       Int
  userId       Int
  fileKey      String
  fileType     FileType
  fileName     String
  fileSize     Int?
  mimeType     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  room         Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
}

model MeetingSession {
  id           Int                @id @default(autoincrement())
  roomId       Int
  startTime    DateTime           @default(now())
  endTime      DateTime?
  duration     Int?               // Длительность в минутах
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  room         Room               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  participants Participant[]      // Прямое указание участников встречи

  @@index([roomId])
}

model Participant {
  id              Int                @id @default(autoincrement())
  userId          Int                @unique
  name            String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  meetingSessions MeetingSession[]   
  sessions        ParticipantSession[] 

  @@index([userId])
}

model ParticipantSession {
  id              Int           @id @default(autoincrement())
  participantId   Int
  meetingSessionId Int
  joinTime        DateTime      @default(now())
  leaveTime       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  participant     Participant    @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([participantId])
  @@index([meetingSessionId])
}

enum FileType {
  VIDEO
  AUDIO
  TEXT
  PDF
}

enum PermissionLevel {
  OWNER
  ADMIN
  ALL
}