generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id                   Int       @id @default(autoincrement())
  shortId              String    @unique
  name                 String
  description          String?
  startAt              DateTime  @default(now())
  timeZone             String    @default("Europe/Moscow")
  durationMinutes      Int?
  isPublic             Boolean   @default(false)
  showHistoryToNewbies Boolean   @default(false)
  passwordHash         String?
  waitingRoomEnabled   Boolean   @default(false)
  allowEarlyJoin       Boolean   @default(true)
  ownerId              Int
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  cancelled            Boolean   @default(false)

  canShareScreen       PermissionLevel @default(ALL)
  canStartPresentation       PermissionLevel @default(ALL)

  allowedParticipants  AllowedParticipant[]
  files                File[]
}

model AllowedParticipant {
  id        Int      @id @default(autoincrement())
  roomId    Int
  userId    Int
  createdAt DateTime @default(now())

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
}

model File {
  id           Int       @id @default(autoincrement())
  roomId       Int
  userId       Int
  fileKey      String
  fileType     FileType
  fileName     String
  fileSize     Int?
  mimeType     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  room         Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
}

enum FileType {
  VIDEO
  AUDIO
  TEXT
  PDF
}

enum PermissionLevel {
  OWNER
  ADMIN
  ALL
}