services:
  frontend:
    build:
      context: ./apps/frontend
    ports:
      - "3000:3000"
    env_file:
      - ./apps/frontend/.env

  backend-dev:
    build:
      context: ./apps/backend
      target: development
    container_name: backend-dev
    ports:
      - "3001:3001"
      - "5555:5555"
    env_file:
      - ./apps/backend/.env
    volumes:
      - ./apps/backend:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev
    depends_on:
      - postgres
      - redis

  backend-prod:
    build:
      context: ./apps/backend
      target: production
    container_name: backend-prod
    ports:
      - "3001:3001"
      - "5555:5555"
    env_file:
      - ./apps/backend/.env
    command: node dist/main
    depends_on:
      - postgres
      - redis

  backend-test:
    build:
      context: ./apps/test-backend
    container_name: test-backend
    ports:
      - "8080:8080"

  livekit:
    image: livekit/livekit-server:latest
    restart: unless-stopped
    ports:
      - "7880:7880/tcp"
      - "7881-7885:7881-7885/udp"
      - "7882:7882/tcp"
    command: ["--config", "/infrastructure/livekit/livekit.yaml"]
    volumes:
      - ./infrastructure/livekit:/infrastructure/livekit

  egress:
    image: livekit/egress:latest
    restart: unless-stopped
    container_name: livekit-egress
    environment:
      - EGRESS_CONFIG_FILE=/config/egress.yaml
    volumes:
      - ./infrastructure/egress/output:/output
      - ./infrastructure/egress/egress.yaml:/config/egress.yaml:ro
    command: --config /config/egress.yaml
    depends_on:
      - livekit
      - redis

  postgres:
    image: postgres:17-alpine
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - ./infrastructure/postgres/.env
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ./infrastructure/minio/.env
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  pgdata:
  redisdata:
  minio-data:
